# -*- coding: utf-8 -*-
"""BootcampProje.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SkeeZsF0U4xCyBDiBC6fZHxqes4BWtQ
"""

from google.colab import drive
drive.mount('/content/drive/')

# %cd "/content/drive/My Drive/"

# Temel Kütüphaneleri Import Etme
import numpy as np 
import pandas as pd 
import matplotlib as plt
import matplotlib.pyplot as plt
import seaborn as sns

import os

from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score

# Model Kurma
from sklearn.svm import SVC
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

data=pd.read_csv("zomato.csv")  # Veri Kümesini Okuma

data.head()   # İlk 5 veri

print("Bangalore Restaurants Dataset includes {0} rows and {1} columns." .format(data.shape[0] , data.shape[1]) )

data.info()   # Veri bilgileri

del data['url']     # Projede kullanmayacağımız öz nitelikleri veri kümesinden çıkarma
del data['address']
del data['phone']
del data['location']
del data["reviews_list"]
data.rename(columns={'name': 'Restaurant_Name','online_order': 'Online_Order','book_table': 'Book_Table','rate': 'Restaurant_Point','votes': 'Votes','rest_type': 'Restaurant_Type',
                     'dish_liked': 'Dishes_Liked','cuisines': 'Cuisines','approx_cost(for two people)': 'Average_Cost', 'reviews_list': 'Reviews_List','menu_item': 'Menu_Item',
                     'listed_in(type)': 'Restaurant_Category','listed_in(city)': 'Location'}, inplace=True)

data.Restaurant_Point.value_counts()

data.Restaurant_Point = data.Restaurant_Point.replace("NEW", np.nan)  # Restaurant_Point niteliğindeki anlamsız ve NAN verilerin temizlenmesi
data.Restaurant_Point = data.Restaurant_Point.replace("-", np.nan)
data.dropna(how ='any', inplace = True)

data.Online_Order=data.Online_Order.apply(lambda x: '1' if str(x)=='Yes' else '0')   # Kategorik değişkenlerin sayısallaştırılması
data.Book_Table=data.Book_Table.apply(lambda x: '1' if str(x)=='Yes' else '0')

data.head()

new_data = data
new_data.Restaurant_Point = new_data['Restaurant_Point'].astype(str)  
new_data.Restaurant_Point = new_data.Restaurant_Point.apply(lambda x: x.replace('/5',''))  # Restaurant_Point niteliğinin ' /5 ' den kurtarılması
new_data.Restaurant_Point =new_data.Restaurant_Point.apply(lambda x: float(x))    # Tip dönüşümü
new_data.head()

new_data.Average_Cost = new_data['Average_Cost'].astype(str)
new_data.Average_Cost = new_data.Average_Cost.apply(lambda x: x.replace(',',''))   # Average_Cost niteliğinin ' , ' den kurtarılması
new_data.Average_Cost =new_data.Average_Cost.apply(lambda x: float(x))     # Tip dönüşümü
new_data.head()

new_data.Online_Order=new_data.Online_Order.astype(int)     # Tip dönüşümü
new_data.Book_Table=new_data.Book_Table.astype(int) 
new_data.Votes=new_data.Votes.astype(float)

data.info()

data.isnull().sum()   # Boş veri kontrolü

print("Restaurant_Name' : ",data['Restaurant_Name'].unique())   # Öz niteliklerin unique değerleri
print("Online_Order' : ",data['Online_Order'].unique())
print("Book_Table' : ",data['Book_Table'].unique())
print("Restaurant_Type : ",data['Restaurant_Type'].unique())
print("Dishes_Liked : ",data['Dishes_Liked'].unique())
print("Cuisines : ",data['Cuisines'].unique())
print("Menu_Item : ",data['Menu_Item'].unique())
print("Restaurant_Category : ",data['Restaurant_Category'].unique())
print("Location: ",data['Location'].unique())

from sklearn import preprocessing      


le = preprocessing.LabelEncoder()
data['Restaurant_Category'] = le.fit_transform(data['Restaurant_Category'])   # Kategorik değişkenlerin sayısallaştırılması
data['Location'] = le.fit_transform(data['Location'])
data.head(3)

Y=data.copy()

dummy_rest_type=pd.get_dummies(Y['Restaurant_Type'])     # Kategorik değişkenlerin sayısallaştırılması
dummy_cuisines=pd.get_dummies(Y['Cuisines'])
dummy_dishliked=pd.get_dummies(Y['Dishes_Liked'])

Y=pd.concat([Y,dummy_rest_type,dummy_cuisines,dummy_dishliked,
            ],axis=1)

del Y['Restaurant_Type']
del Y['Cuisines']
del Y['Dishes_Liked']

Y.head(3)

lastData=Y.drop(['Restaurant_Name',          
          'Menu_Item',
         ],axis=1);

lastData.head()

from sklearn import preprocessing     
scaler = preprocessing.MinMaxScaler()   # Normalizasyon
scaler.fit(lastData)
lastData = pd.DataFrame(scaler.transform(lastData), index=lastData.index, columns=lastData.columns)

lastData.head()

lastData.Restaurant_Category=lastData.Restaurant_Category.astype(int)
from sklearn.feature_selection import SelectKBest, chi2      # SelectKBest ile hedefi en çok etkileyecek niteliği bulma
X = lastData.loc[:,lastData.columns!='Restaurant_Category']
y = lastData[['Restaurant_Category']]
selector = SelectKBest(chi2, k=3)
selector.fit(X, y)
X_new = selector.transform(X)
print(X.columns[selector.get_support(indices=True)])

X = lastData[['Bar']] 
y = lastData[['Restaurant_Category']]

y.describe()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)  # %75 Eğitim Verisi - %25 Test Verisi
clf_logreg = LogisticRegression(random_state=0)
clf_logreg.fit(X_train,y_train)
y_pred = clf_logreg.predict(X_test)
logRegScore = accuracy_score(y_test,y_pred)
print('Accuracy of Logistic Regression: {:.3f}%'.format(logRegScore*100))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)
clf_rf = RandomForestClassifier(n_estimators=100, max_depth=4,random_state=0)
clf_rf.fit(X_train,y_train)
y_pred = clf_rf.predict(X_test)
rfScore = accuracy_score(y_test,y_pred)
print('Accuracy of Random Forest: {:.3f}%' .format(rfScore*100))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)
clf_dt = DecisionTreeClassifier(random_state=0)
clf_dt.fit(X_train,y_train)
y_pred = clf_dt.predict(X_test)
decTreeScore = accuracy_score(y_test,y_pred)
print('Accuracy of Decision Tree: {:.3f}%'.format(decTreeScore*100))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)
clf_svc = svm.SVC(kernel='linear')
clf_svc.fit(X_train,y_train)
y_pred = clf_svc.predict(X_test)
svmScore = accuracy_score(y_test,y_pred)
print('Accuracy of SVM: {:.3f}%'.format(svmScore*100))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)
knn = KNeighborsClassifier(n_neighbors = 2) 
knn.fit(X_train, y_train)
prediction = knn.predict(X_test)

knnScore = knn.score(X_test, y_test)
print("{} NN Score: {:.3f}%".format(knn.n_neighbors, knnScore*100))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)
nb = GaussianNB()
nb.fit(X_train, y_train)

nbScore = nb.score(X_test,y_test)
print("Accuracy of Naive Bayes: {:.3f}%".format(nbScore*100))

methods_accuracy = {
    "Logistic Regression":logRegScore,
    "SVM" : svmScore,
    "KNN" : knnScore,
    "Decision Tree" : decTreeScore,
    "Random Forest" : rfScore,
    "Naive Bayes" : nbScore
}

methods = ["Logistic Regression", "SVM","KNN", "Naive Bayes", "Decision Tree", "Random Forest"]
accuracy = [logRegScore, svmScore, knnScore, nbScore, decTreeScore, rfScore]

sns.set()
plt.figure(figsize=(14,5))
plt.ylabel("Başarı %")
plt.xlabel("Algoritmalar")
sns.barplot(x=methods, y=accuracy, palette="deep")


for line in range(len(methods)):
     plt.text(line-0.20, # x
              0.85, # y
             "{:.3f}%".format(accuracy[line]*100), 
             horizontalalignment='left',
              size='large',
             color="black",
             )

        
plt.savefig('karşılaştır.png',transparent=True)

        
plt.show()





